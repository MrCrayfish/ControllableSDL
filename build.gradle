plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    api libs.net.java.dev.jna.jna
    api libs.org.jetbrains.annotations
    api libs.org.slf4j.slf4j.api
    testImplementation libs.org.junit.jupiter.junit.jupiter
    testImplementation libs.net.java.dev.jna.jna.platform
    testImplementation libs.ch.qos.logback.logback.classic
}

test {
    useJUnitPlatform()
}

// Used in CI since we run tests separately when building
if (project.hasProperty('excludeTests') && project.excludeTests == 'true') {
    tasks.withType(Test).configureEach {
        enabled = false
    }
}

group = 'com.mrcrayfish'
version = "${sdl2_version}-${controllable_sdl_version}"
description = 'ControllableSDL'
java.sourceCompatibility = JavaVersion.VERSION_1_8

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        if (Boolean.getBoolean("CI")) {
            if (env("PACKAGES_REPO") && env("GPR_USER") && env("GPR_TOKEN")) {
                maven {
                    name = "GitHub Packages"
                    url = uri(env("PACKAGES_REPO"))
                    credentials {
                        username = env("GPR_USER")
                        password = env("GPR_TOKEN")
                    }
                }
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
}

signing {
    if (Boolean.getBoolean("CI")) {
        if (env("GPG_SIGNING_KEY") && env("GPG_SIGNING_PASSWORD")) {
            def signingKey = env("GPG_SIGNING_KEY")
            def signingPassword = env("GPG_SIGNING_PASSWORD")
            useInMemoryPgpKeys(signingKey, signingPassword)
            sign publishing.publications.mavenJava
        }
    }
}

tasks.register('signJar', Exec) {
    dependsOn jar
    onlyIf {
        Boolean.getBoolean("CI") &&
        env("KEYSTORE_FILE") &&
        env("KEYSTORE_ALIAS") &&
        env("KEYSTORE_PASSWORD")
    }
    doLast {
        def signingJarFile = tasks.jar.getArchiveFile().get().getAsFile()
        def keystoreFile = env("KEYSTORE_FILE")
        def keystorePassword = env("KEYSTORE_PASSWORD")
        def keystoreAlias = env("KEYSTORE_ALIAS")
        commandLine "jarsigner",
            "-keystore", keystoreFile,
            "-storepass", keystorePassword,
            "-keypass", keystorePassword,
            signingJarFile, keystoreAlias
    }
}
jar.finalizedBy signJar

static def env(String key) {
    return System.getenv(key)
}
